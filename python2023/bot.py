from concurrent.futures import Executor
from os import name
from aiogram import Bot, types, executor
from aiogram.dispatcher import Dispatcher
from aiogram.types import Message
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text, Command
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from datetime import datetime
import dt 
import sqlite3
import random
import asyncio
import re


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=dt.TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())  # –ò—Å–ø–æ–ª—å–∑—É–µ–º MemoryStorage –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ü–µ–ª–µ–π
db = dt.Database('database')





# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class MenuState(StatesGroup):
    ChooseTariff = State()
    Tarifs = State()
    Admin_Panel = State()
    knopkiadmina = State()
    tarif = State()
    waittar = State()
    random = State()
    button = State()
    podtverd = State()
    url = State()
    danot = State()
    all_knpk = State()
    

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def bbr(message: Message,state: FSMContext):
     user_id = message.from_user.id
     username = message.from_user.username
     full_name = message.from_user.full_name

     if not db.user_exists(user_id):
          db.add_user(user_id, username, full_name)

     
     
     
     
    
     signal = InlineKeyboardMarkup(row_width=1)
     s1 = InlineKeyboardButton(text="–ù–∞—à –¢–ì–ö‚úÖ",url="https://t.me/MENFRD")
     s2 = InlineKeyboardButton(text="LuckyJet_Hack 3.0üí∞",callback_data="soft")
     signal.add(s1,s2)
     
     menu = ReplyKeyboardMarkup(resize_keyboard=True)
     m1 = KeyboardButton("–ú–µ–Ω—é‚úÖ")
     menu.row(m1)
     m2 = KeyboardButton("–°–∏–≥–Ω–∞–ª—ãüöÄ")
     menu.row(m2)
     m3 = KeyboardButton("JEN5634-GDVVV_FFS3333SFGDHDHHDT34T")
     menu.row(m3)
     
     menu1 = ReplyKeyboardMarkup(resize_keyboard=True)
     m12 = KeyboardButton("–ú–µ–Ω—é‚úÖ")
     menu1.row(m12)
     m22 = KeyboardButton("–°–∏–≥–Ω–∞–ª—ãüöÄ")
     menu1.row(m22)
     
     user_id1 = message.from_user.id
     photo = open("9876.jpeg",'rb')
     if user_id1 == 5087149698:
        await message.answer(f"<i>–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞...</i>",parse_mode="HTML",reply_markup=menu) 
        await bot.send_photo(chat_id=message.from_user.id,caption=f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,{message.from_user.full_name}!‚úä</b>\n\n<i>–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ 1WIN —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–æ—Ñ—Ç–∞ LuckyJet_Hack 3.0üí∞</i>\n\n<i>–¢–∞–∫–∂–µ —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –∏ —Ç–∞–∫—Ç–∏–∫–∞–º–∏ –ø–æ –∞–±—É–∑—É 1WIN!üöÄ</i>\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!üëá</b>",photo=photo, reply_markup=signal,parse_mode="HTML")
       
     else:
        await message.answer(f"<i>–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –±–æ—Ç–∞...</i>",parse_mode="HTML",reply_markup=menu1) 
        await bot.send_photo(chat_id=message.from_user.id,caption=f"<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,{message.from_user.full_name}!‚úä</b>\n\n<i>–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏–º–µ–Ω–Ω–æ —Ç–µ–±–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ 1WIN —Å –ø–æ–º–æ—â—å—é –Ω–∞—à–µ–≥–æ —Å–æ—Ñ—Ç–∞ LuckyJet_Hack 3.0üí∞</i>\n\n<i>–¢–∞–∫–∂–µ —É –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º–∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏ —Å—Ö–µ–º–∞–º–∏ –∏ —Ç–∞–∫—Ç–∏–∫–∞–º–∏ –ø–æ –∞–±—É–∑—É 1WIN!üöÄ</i>\n\n<b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!üëá</b>",photo=photo, reply_markup=signal,parse_mode="HTML")






@dp.message_handler(Text(equals="–°–∏–≥–Ω–∞–ª—ãüöÄ", ignore_case=True), state="*")
async def private_hack(message: Message,state: FSMContext):
    user_id = message.from_user.id
    tarif = get_tarif(user_id)
    
    markup = InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
    mp1 = InlineKeyboardButton(text="üíé–ù–û–í–´–ô Xüíé",callback_data="xsignals")
    markup.add(mp1)
    if tarif == 0:
        await message.answer("<i>–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤!–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ —Ç–∞—Ä–∏—Ñ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å)</i>",parse_mode="HTML")
        return await bbr(message,state)
    elif tarif == 1:
        await message.answer("<b>LuckyJet_Hack 3.0:</b>\n\n<i>–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ,—Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º!</i>\n\n<b>–ñ–º–∏üëá</b>",parse_mode="HTML",reply_markup=markup)
        await state.set_state(MenuState.random)
    elif tarif == 2:
        await message.answer("<b>LuckyJet_Hack 3.0:</b>\n\n<i>–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ,—Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º!</i>\n\n<b>–ñ–º–∏üëá</b>",parse_mode="HTML",reply_markup=markup)
        await state.set_state(MenuState.random)
    elif tarif == 3:
        await message.answer("<b>LuckyJet_Hack 3.0:</b>\n\n<i>–£ —Ç–µ–±—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¢–∞—Ä–∏—Ñ –≠–∫—Å–ø–µ—Ä—Ç,—Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º!</i>\n\n<b>–ñ–º–∏üëá</b>",parse_mode="HTML",reply_markup=markup)
        await state.set_state(MenuState.random)
        
next_button_enabled = True      
        
@dp.callback_query_handler(Text(equals="xsignals", ignore_case=True), state=MenuState.random)
async def private_hac(callback: types.CallbackQuery,state: FSMContext):
    global current_range_index
    global next_button_enabled
    random_coefficient = generate_random_coefficient()
    
    if not next_button_enabled:
        # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º—Å—è –≤—Ä–µ–º–µ–Ω–µ–º
        await callback.answer("–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
    else:
         random_coefficient = generate_random_coefficient()
        
         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏ –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ"
         markup = InlineKeyboardMarkup(row_width=1, one_time_keyboard=True)
         mp1 = InlineKeyboardButton(text="üíé–ù–û–í–´–ô Xüíé",callback_data="xsignals")
         markup.add(mp1)
        
         await callback.message.answer(f"<b>[</b>{random_coefficient}X<b>]</b>", reply_markup=markup,parse_mode="HTML")
        
         # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª—å—à–µ" –Ω–∞ 23 —Å–µ–∫—É–Ω–¥—ã
         next_button_enabled = False
         await asyncio.sleep(23)
         next_button_enabled = True
         

# –°–ø–∏—Å–æ–∫ –¥–∏–∞–ø–∞–∑–æ–Ω–æ–≤
ranges = [(1.00, 7.00), (1.00, 10.00), (1.00, 2.80), (1.00, 100.00)]
current_range_index = 0  # –ò–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
def generate_random_coefficient():
    global current_range_index
    min_coefficient, max_coefficient = ranges[current_range_index]
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤ —Ç–µ–∫—É—â–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    random_coefficient = round(random.uniform(min_coefficient, max_coefficient), 2)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    current_range_index = (current_range_index + 1) % len(ranges)
    
    return random_coefficient





@dp.message_handler(Text(equals="–ú–µ–Ω—é‚úÖ", ignore_case=True), state="*")
async def menu(message: Message,state: FSMContext):
    user_id = message.from_user.id
    tarif = get_tarif(user_id)
    ndn = ReplyKeyboardMarkup(resize_keyboard=True)
    n1 = KeyboardButton("–í–µ—Ä–Ω—É—Ç—å –≤ –Ω–∞—á–∞–ª–æ‚è™")
    ndn.add(n1)
    greeting = get_greeting(tarif)
    time = datetime.now().strftime("%H:%M:%S %d-%m-2023")
    await message.answer(f"<b>MAIN MENU  {time}</b>\n\n<i><b>–í–∞—à ID:{message.from_user.id}</b></i>\n<i><b>–í–∞—à username:@{message.from_user.username}</b></i>\n\n<i>–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ:</i> <i><b>{greeting}</b></i>\n\n<i>–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞,–≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º!–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ –¢–∞—Ä–∏—Ñ—ãüî•</i>" ,parse_mode="HTML",reply_markup=ndn)
    
@dp.message_handler(Text(equals="–í–µ—Ä–Ω—É—Ç—å –≤ –Ω–∞—á–∞–ª–æ‚è™", ignore_case=True), state="*")
async def menu(message: Message,state: FSMContext):
    await state.reset_state()
    return await bbr(message,state)
    
def get_tarif(user_id):
    conn = sqlite3.connect("database")  # –ó–∞–º–µ–Ω–∏—Ç–µ "your_database.sqlite" –Ω–∞ –∏–º—è –≤–∞—à–µ–π SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cursor = conn.cursor()
    cursor.execute("SELECT tarif FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    conn.close()
    if row:
        return row[0]
    else:
        return None
    
def get_greeting(tarif):
    if tarif == 0:
        return "Missing"
    elif tarif == 1:
        return "–ü—Ä–æ–±–Ω—ã–π"
    elif tarif == 2:
        return "–ë–∞–∑–æ–≤—ã–π"
    elif tarif == 3:
        return "–≠–∫—Å–ø–µ—Ä—Ç"
    else:
        pass








@dp.callback_query_handler(Text(equals="soft", ignore_case=True), state="*")
async def soft(callback: types.CallbackQuery,state: FSMContext):
   knopki = InlineKeyboardMarkup(row_width=1)
   k1 = InlineKeyboardButton(text="F.A.Qü§î",url="https://telegra.ph/Instrukciya-ispolzovaniya-i-ego-vozmozhnosti-LuckyJetX-30-10-04")
   k2 = InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ—ãüìã",callback_data="tarifs")
   knopki.add(k1,k2)
   await callback.answer("–°–ø–∞—Å–∏–±–æ,—á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–æ—Ñ—Ç!üî•")
   
   await callback.message.answer("<b><i>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,–µ—â—ë —Ä–∞–∑!–¢—ã –ø–æ–ø–∞–ª –≤ —Ä–∞–∑–¥–µ–ª —Å –Ω–∞—à–∏–º —Å–æ—Ñ—Ç–æ–ºüëá</i></b>\n\n<i>–¢—ã —Å–º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å,—á—Ç–æ-–¥–∞ –∫–∞–∫,–∞ –∑–∞—Ç–µ–º —É–∂–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –Ω–∞—à —Å–æ—Ñ—Ç –∏–ª–∏ –∂–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é,–ø—Ä–æ–±–Ω—É—é –≤–µ—Ä—Å–∏—é.</i>\n\n<b><i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º!</i></b>",parse_mode="HTML",reply_markup=knopki)
   await state.set_state(MenuState.Tarifs)
   
@dp.callback_query_handler(Text(equals="tarifs", ignore_case=True), state=MenuState.Tarifs)  
async def tarifs(callback: types.CallbackQuery,state: FSMContext):
    knpk = InlineKeyboardMarkup(row_width=1)
    l1 = InlineKeyboardButton(text="–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñüí•",callback_data="prob_tar")
    l2 = InlineKeyboardButton(text="–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñüî•",callback_data="baz_tar")
    l3 = InlineKeyboardButton(text="–¢–∞—Ä–∏—Ñ –≠–∫—Å–ø–µ—Ä—ÇüöÄ",callback_data="expert_tar")
    knpk.add(l1,l2,l3)
    await callback.answer("–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª: –¢–∞—Ä–∏—Ñ—ãüî•!") 
    await callback.message.answer("<b>LuckyJet_Hack 3.0:</b>\n\n<b>–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ</b>\n\n<i>–¶–µ–Ω–∞ - <b>0‚ÇΩ</b></i>\n\n<i>–î–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –±—ã–ª —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ω–∏—è —Å —Å–æ—Ñ—Ç–æ–º –∏ –µ–≥–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏.–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–æ—Ñ—Ç–∞ –≤ —Ä—É–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - 3-–æ–µ —Å—É—Ç–æ–∫.\n–ó–∞ —ç—Ç–æ—Ç –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å —Å–æ—Ñ—Ç–æ–º –∏ —Å–º–æ–∂–µ—Ç –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–π —Ç–∞—Ä–∏—Ñ üí•</i>\n\n<b>–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ</b>\n\n<i>–¶–µ–Ω–∞ - <b>6999‚ÇΩ</b>\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º 10 –¥–Ω–µ–π.–ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –≤–∞—à—É –ø–æ–¥–ø–∏—Å–∫—É,–ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–æ–≤—É—é –∏–ª–∏ –∂–µ –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º.\n–î–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª—å—à–∏–º —Å–ø—Ä–æ—Å–æ–º —Å—Ä–µ–¥–∏ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ üî•</i>\n\n<b>–¢–∞—Ä–∏—Ñ –≠–∫—Å–ø–µ—Ä—Ç</b>\n\n<i>–¶–µ–Ω–∞ - <b>29990‚ÇΩ</b>\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Ñ—Ç—É –Ω–∞ 30 –¥–Ω–µ–π (1 –º–µ—Å—è—Ü).–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏–∑–ª–∏—à–Ω–∏)–í –¥–≤—É—Ö —Å–ª–æ–≤–∞—Ö,–∑–∞—Ä–∞–±–æ—Ç–æ–∫ –≤–∞—Å —É–¥–∏–≤–∏—Ç!üöÄ</i>\n\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ,–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏!üëá</b>",parse_mode="HTML",reply_markup=knpk)


@dp.callback_query_handler(Text(equals="baz_tar", ignore_case=True), state="*")
async def probn(callback: types.CallbackQuery,state: FSMContext):
    oplata = InlineKeyboardMarkup(row_width=1)
    op1 = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—åüëâ",url="https://telegra.ph/Oplata-tarifov-10-20 ")
    op2 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚è™",callback_data="nazad")
    oplata.add(op1,op2)
    
    await callback.answer("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞...")
    await callback.message.answer("<b>–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ!</b>\n<i>–¶–µ–Ω–∞ - 6999‚ÇΩ</i>\n\n<i><b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã —Å—Ä–∞–∑—É —Å–º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞: –°–∏–≥–Ω–∞–ª—ãüöÄ!</b></i>",parse_mode="HTML",reply_markup=oplata)
   

@dp.callback_query_handler(Text(equals="nazad", ignore_case=True), state="*")
async def probn(callback: types.CallbackQuery,state: FSMContext):
    return await tarifs(callback,state)



@dp.callback_query_handler(Text(equals="expert_tar", ignore_case=True), state="*")
async def probn(callback: types.CallbackQuery,state: FSMContext):
    oplata3 = InlineKeyboardMarkup(row_width=1)
    op13 = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—åüëâ",url="https://telegra.ph/Oplata-tarifov-10-20")
    op23 = InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥‚è™",callback_data="nazad")
    oplata3.add(op13,op23)
    
    await callback.answer("–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Ç–∞—Ä–∏—Ñ–∞ —ç–∫—Å–ø–µ—Ä—Ç...")
    await callback.message.answer("<b>–¢–∞—Ä–∏—Ñ –≠–∫—Å–ø–µ—Ä—Ç!</b>\n<i>–¶–µ–Ω–∞ - 29990‚ÇΩ</i>\n\n<i><b>–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç—ã —Å—Ä–∞–∑—É —Å–º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞: –°–∏–≥–Ω–∞–ª—ãüöÄ!</b></i>",parse_mode="HTML",reply_markup=oplata3)

    



@dp.message_handler(Text(equals="JEN5634-GDVVV_FFS3333SFGDHDHHDT34T", ignore_case=True), state="*")
async def signals33(message: Message,state: FSMContext):
    adminka = ReplyKeyboardMarkup(resize_keyboard=True)
    a1 = KeyboardButton("–ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤üí•")
    adminka.row(a1)
    a2 = KeyboardButton("–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—ÑüöÄ")
    adminka.row(a2)
    a3 = KeyboardButton("–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—Éüì¢")
    adminka.row(a3)
    a4 = KeyboardButton("–ù–∞–∑–∞–¥‚è™")
    adminka.row(a4  )
    await message.answer(f"<i>–ü—Ä–∏–≤–µ—Ç–∏–∫ my hot —Ñ–µ–º–±–æ–π—á–∏–∫,{message.from_user.full_name}!</i>\n–Æ–∑–∞–π –∫–Ω–æ–ø–∫–∏!",parse_mode="HTML",reply_markup=adminka)
    await state.set_state(MenuState.knopkiadmina )
 
 
 
 
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚è™", ignore_case=True), state=MenuState.knopkiadmina )
async def signals(message: Message,state: FSMContext):
    await state.reset_state()
    return await bbr(message,state)
 
 


@dp.message_handler(Text(equals="–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—Éüì¢",ignore_case=True),state=MenuState.knopkiadmina)
async def sendall(message: types.Message,state: FSMContext):
  back = ReplyKeyboardMarkup(resize_keyboard=True)
  b1 = KeyboardButton("‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")
  back.row(b1)
  await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç,–∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å —Ä–∞–∑–æ—Å–ª–∞—Ç—å –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º!",reply_markup=back)
  await state.set_state(MenuState.button)
  
 
  
@dp.message_handler(Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",ignore_case=True),state=MenuState.button)  
async def nazadfff(message: types.Message,state: FSMContext):
  await state.reset_state()
  return await bbr(message,state)
 
 

 

   
   

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(content_types=['text', 'photo', 'video', 'audio', 'document', 'voice', 'sticker', 'animation'],state=MenuState.button)
async def handle_messages(message: Message,state: FSMContext):
      # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        content_type = message.content_type
    
        content_type in ['photo', 'video', 'audio', 'document', 'voice', 'sticker', 'animation']
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
        if content_type == 'photo':
            file_id = message.photo[-1].file_id
        elif content_type == 'video':
            file_id = message.video.file_id
        elif content_type == 'audio':
            file_id = message.audio.file_id
        elif content_type == 'document':
            file_id = message.document.file_id
        elif content_type == 'voice':
            file_id = message.voice.file_id
        elif content_type == 'sticker':
            file_id = message.sticker.file_id
        elif content_type == 'animation':
            file_id = message.animation.file_id
    

    #text_message = None  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
    
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç
    #file_id = None # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ—Ç —Ñ–∞–π–ª–∞
        text_message = message.html_text

        conn = sqlite3.connect('database')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO rasmes (file_id, content_type,  text_message) VALUES ( ?, ?, ?)",
                   (file_id, content_type, text_message))
        conn.commit()
    except (TypeError,UnboundLocalError):
        await message.answer("–ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –∏–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏.–¢–æ–ª—å–∫–æ —Ñ–∞–π–ª + —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞.–°–∫–∏–Ω—å —Ñ–∞–π–ª –∏ —Ç–µ–∫—Å—Ç!")
        await state.reset_state()
        return await bbr(message,state)
    # –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    bsda = InlineKeyboardMarkup(row_width=1)
    b1 = InlineKeyboardButton(text="–î–∞",callback_data="add_button")
    bsda.row(b1)
    b2 = InlineKeyboardButton(text="–ù–µ—Ç",callback_data="not_button")
    bsda.row(b2)

    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É?",reply_markup=bsda)
    await state.set_state(MenuState.danot)
  
@dp.message_handler(Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",ignore_case=True),state=MenuState.danot)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  await state.reset_state()
  return await bbr(message,state)
  
@dp.callback_query_handler(Text(equals="not_button",ignore_case=True),state=MenuState.danot)
async def inlanef(callback: types.CallbackQuery,state: FSMContext):
    await callback.message.answer("–ú–Ω–µ –ª–µ–Ω—å –±—ã–ª–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ö—É–π–Ω—é —Ç–∏–ø–æ —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –±–µ–∑ –∫–Ω–æ–ø–∫–∏,–ø–æ—ç—Ç–æ–º—É –∂–º–∏ –¥–∞ –∏–ª–∏ –∏–¥–∏ –Ω–∞—Ö—É–π")
          
@dp.callback_query_handler(Text(equals="add_button",ignore_case=True),state=MenuState.danot)
async def inlanef(callback: types.CallbackQuery,state: FSMContext):
  await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏!")
  await callback.answer()
  await state.set_state(MenuState.url)
  
@dp.message_handler(Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",ignore_case=True),state=MenuState.url)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  await state.reset_state()
  return await bbr(message,state)
  
  
@dp.message_handler(content_types=["text"],state=MenuState.url)
async def url009(message: types.Message,state: FSMContext):
  global jokol
  jokol = message.text
  await message.answer("–í–≤–µ–¥–∏—Ç–µ URl –¥–ª—è –∫–Ω–æ–ø–∫–∏!")
  await state.set_state(MenuState.all_knpk)
  
@dp.message_handler(Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",ignore_case=True),state=MenuState.all_knpk)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  await state.reset_state()
  return await bbr(message,state)
  

    
 
@dp.message_handler(content_types=["text"],state=MenuState.all_knpk)
async def podver123(message: types.Message,state: FSMContext):
    global url_knpk
    global rassulka
    
    url_knpk = message.text
    link = r'https?://\S+'
    if re.search(link,url_knpk):
          
          conn = sqlite3.connect('database')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          cursor = conn.cursor()
          cursor.execute("SELECT text_message, file_id, content_type FROM rasmes ORDER BY id DESC LIMIT 1")
          row = cursor.fetchone()
          if row:
                    text_message, file_id, content_type = row
                    knmnv = InlineKeyboardMarkup(row_width=1)
                    knmv1 = InlineKeyboardButton(text=jokol, url=url_knpk)
                    knmnv.add(knmv1)
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    combined_message = text_message
                    if content_type == 'photo':
                           await bot.send_photo(chat_id=message.from_user.id,photo= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                    elif content_type == 'video':
                           await bot.send_video(chat_id=message.from_user.id,video= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                    elif content_type == 'audio':
                          await bot.send_audio(chat_id=message.from_user.id,audio= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                    elif content_type == 'document':
                           await bot.send_document(chat_id=message.from_user.id,document= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                    elif content_type == 'sticker':
                             await bot.send_sticker(chat_id=message.from_user.id,sticker= file_id)
                    elif content_type == 'animation':
                         await bot.send_animation(chat_id=message.from_user.id,animation=file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                    flfpp = InlineKeyboardMarkup(row_width=1)
                    dfk1 = InlineKeyboardButton(text="–î–∞",callback_data="da")
                    flfpp.row(dfk1)
                    ddf1 = InlineKeyboardButton(text="–ù–µ—Ç",callback_data="net")
                    flfpp.row(ddf1)
                    await message.answer("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",reply_markup=flfpp)
                    await state.set_state(MenuState.podtverd)
                    
        # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏

          conn.close()
                
    else:
        
        await state.set_state()
        await message.answer("–≠—Ç–æ –Ω–µ —Å—Å—ã–ª–∫–∞ –¥—ç–±–∏–ª –¥–µ–ª–∞–π –≤—Å–µ –∑–∞–Ω–æ–≤–æ —Ö—ã—Ö—ã—Ö—ã—Ö—ã—Ö—ã—Ö—ã—Ö—ã—Ö")
        return await bbr(message,state)
    





@dp.message_handler(Text(equals="‚¨ÖÔ∏è–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",ignore_case=True),state=MenuState.podtverd)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  await state.reset_state()
  return await bbr(message,state)





     

@dp.callback_query_handler(Text(equals="da",ignore_case=True),state=MenuState.podtverd)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  
  

       if message.from_user.id == int(5087149698):
         database = dt.Database('database')
         conn = sqlite3.connect('database')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
         cursor = conn.cursor()
         cursor.execute("SELECT user_id FROM users")
         users = cursor.fetchall()
         conn.close() 
         
         for user_id in users:
                  try:  
                        conn = sqlite3.connect('database')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                        cursor = conn.cursor()
                        cursor.execute("SELECT text_message, file_id, content_type FROM rasmes ORDER BY id DESC LIMIT 1")
                        row = cursor.fetchone()
                        if row:
                                text_message, file_id, content_type = row
                                knmnv = InlineKeyboardMarkup(row_width=1)
                                knmv1 = InlineKeyboardButton(text=jokol, url=url_knpk)
                                knmnv.add(knmv1)
        # –û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ —Ñ–∞–π–ª (–µ—Å–ª–∏ –µ—Å—Ç—å) –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                combined_message = text_message
                                
                               
                                if content_type == 'photo':
                                       await bot.send_photo(user_id[0],photo= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                                       
                                elif content_type == 'video':
                                        await bot.send_video(user_id[0],video= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                                        
                                elif content_type == 'audio':
                                          await bot.send_audio(user_id[0],audio= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                                          
                                elif content_type == 'document':
                                         await bot.send_document(user_id[0],document= file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                                         
                                elif content_type == 'sticker':
                                      await bot.send_sticker(user_id[0],sticker= file_id)
                                      
                                elif content_type == 'animation':
                                     await bot.send_animation(user_id[0],animation=file_id, caption=combined_message,parse_mode="HTML",reply_markup=knmnv)
                                     
                                await asyncio.sleep(.05) 
                  except: 
                      pass
         await bot.send_message(message.from_user.id,"–£—Å–ø–µ—à–Ω–æ!")
         









   
@dp.message_handler(Text(equals="–ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤üí•", ignore_case=True), state=MenuState.knopkiadmina )
async def signals(message: Message,state: FSMContext):
     user_count = db.get_user_count()
    
     await message.reply(f"–í—Å–µ–≥–æ —é–∑–µ—Ä–æ–≤: {user_count}") 
     await state.reset_state()
     return await bbr(message,state)
    
       
@dp.message_handler(Text(equals="–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ç–∞—Ä–∏—ÑüöÄ", ignore_case=True), state=MenuState.knopkiadmina )
async def signals45(message: Message,state: FSMContext):
    nazaf = ReplyKeyboardMarkup(resize_keyboard=True)
    nz1 = KeyboardButton("–ù–∞–∑–∞–¥")
    nazaf.row(nz1)
    await message.answer("–í–≤–µ–¥–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,—É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ!",reply_markup=nazaf)
    await state.set_state(MenuState.tarif)

@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥", ignore_case=True), state=MenuState.tarif )
async def fffl(message: Message,state: FSMContext):
    
    return await signals33(message,state)
    

@dp.message_handler(content_types=["any"],state=MenuState.tarif)
async def tark432(message: Message,state: FSMContext):
    tar = ReplyKeyboardMarkup(resize_keyboard=True)
    t1 = KeyboardButton("–ü—Ä–æ–±–Ω—ã–π")
    t2 = KeyboardButton("–ë–∞–∑–æ–≤—ã–π")
    t3 = KeyboardButton("–≠–∫—Å–ø–µ—Ä—Ç")
    tar.add(t1,t2,t3)
    try:
        
       async with state.proxy() as data:
           data["user_id"] = int(message.text)
        
       if db.user_exists(data["user_id"]):
           await message.reply("–ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ —Ö–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é?",reply_markup=tar)
           await state.set_state(MenuState.waittar)
       else:
           await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
           await signals45(message,state)
    except(ValueError,AttributeError,TypeError):
        await message.reply("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä!")






@dp.message_handler(lambda message: message.text in ["–ü—Ä–æ–±–Ω—ã–π", "–ë–∞–∑–æ–≤—ã–π", "–≠–∫—Å–ø–µ—Ä—Ç"], state=MenuState.waittar)
async def process_tarif_choice(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        tarif_choice = message.text
        
        if tarif_choice == "–ü—Ä–æ–±–Ω—ã–π":
            tarif_value = 1
        elif tarif_choice == "–ë–∞–∑–æ–≤—ã–π":
            tarif_value = 2
        elif tarif_choice == "–≠–∫—Å–ø–µ—Ä—Ç":
            tarif_value = 3
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ tarif –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.update_tarif(data['user_id'], tarif_value)
        
        await message.reply(f"–¢–∞—Ä–∏—Ñ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        return await signals33(message,state)










@dp.callback_query_handler(Text(equals="prob_tar", ignore_case=True), state="*")
async def probn(callback: types.CallbackQuery,state: FSMContext):
      await callback.answer("–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞...")
      photo2 = open("7654.jpeg",'rb')
      fifi = InlineKeyboardMarkup(row_width=1)
      f1 = InlineKeyboardButton(text="–°–ø–∞—Å–∏–±–æüî•",callback_data="thxs")
      fifi.add(f1)
      await bot.send_photo(chat_id=callback.from_user.id,caption="<b><i>–ü—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñüî•</i></b>\n\n\n<i>–ß—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–Ω—ã–π —Ç–∞—Ä–∏—Ñ,–ø–ª–∞—Ç–∏—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, –≤–µ–¥—å  –æ–Ω –∞–±—Å–æ–ª—é—Ç–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π!,</i>\n\n<i>–ù–æ —Ä—è–¥ –¥–µ–π—Å—Ç–≤–∏–π —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–¥–µ—Ç—Å—è. –ù—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ 1WINüëá</i>\n\n\n<b><i>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ 1WIN:\n\n</i></b><i>1.–ï—Å–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω–æ–π –ø–ª–æ—â–∞–¥–∫–µ,—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –µ–≥–æ –ø–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–π —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ‚è¨</i>\n\n(https://1wnwmp.top/casino/list?open=register#xvej)\n\n\n<i>2.–ó–∞—Ç–µ–º –º—ã –≤–≤–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥,–∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –¥–µ–Ω–µ–≥,–Ω–µ–∂–µ–ª–∏ –º—ã –±—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ä–µ–≥–µ—Å—Ç—Ä–∞—Ü–∏—é –±–µ–∑ –Ω–µ–≥–æ,–≤–µ–¥—å –æ–Ω –¥–∞—ë—Ç +500% –∫ –¥–µ–ø–æ–∑–∏—Ç–∞–ºüî•</i>\n\n<i>–ü—Ä–æ–º–æ–∫–æ–¥:</i> <b>VYN99</b> <i>(–°–º–æ—Ç—Ä–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é)</i>\n\n<i>3.–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–æ–≤–æ–≥–æ,—Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –Ω–∞—à–µ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @qwehar.</i>\n\n<b><i>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞–º –≤–∞—à —Ç–∞—Ä–∏—Ñ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–æ—Ñ—Ç—É!</i></b>",photo=photo2,parse_mode="HTML",reply_markup=fifi)
 

@dp.callback_query_handler(Text(equals="thxs", ignore_case=True), state="*")
async def probn(callback: types.CallbackQuery,state: FSMContext):
    flflf = ReplyKeyboardMarkup(resize_keyboard=True)
    ffk1 = KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É‚è™")
    flflf.add(ffk1)
    await callback.answer("–í—ã –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –±–æ—Ç–∞!")
    await callback.message.answer("<b>–í—Å–µ–≥–¥–∞,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞!</b>\n\n<i>–ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –≤–∞—à–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã.–û–Ω –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞–º –≤–∞—à —Ç–∞—Ä–∏—Ñ,–ø–æ—Å–ª–µ —á–µ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–æ—Ñ—Ç–æ–º –≤ —Ä–∞–∑–¥–µ–ª–µ: <b>–°–∏–≥–Ω–∞–ª—ãüöÄ</b></i>\n\n<b>–£—Å–ø–µ—Ö–æ–≤!</b>",parse_mode="HTML",reply_markup=flflf)



@dp.message_handler(Text(equals="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É‚è™", ignore_case=True), state="*")
async def probn(message: Message,state: FSMContext):
    return await bbr(message,state)






















if __name__ == "__main__":
    executor.start_polling(dp,skip_updates=True)