from aiogram import Bot, Dispatcher, executor, types

TOKEN = "6624846975:AAEccnyxiI4UK5S3L14MD9MAXR0R7-ZNHNc"
CHANNEL_ID = "-1002005596317"


bot = Bot(token=TOKEN)
dispatcher = Dispatcher(bot)


@dispatcher.message_handler(commands=['start'])
async def start(message: types.Message):
    user_channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)

    if user_channel_status['status'] != 'left':
        
    else:
        button = types.InlineKeyboardMarkup(row_width=1)
        m1 = types.InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è",url="https://t.me/Arves_Job")
        m2 = types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ",callback_data="–≥–æ—Ç–æ–≤–æ")
        button.add(m1,m2)
        await bot.send_message(message.from_user.id, "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞!", reply_markup=button)


@dispatcher.callback_query_handler(lambda call: True)
async def callback(call: types.CallbackQuery):
    if call.message:
        user_channel_status = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=call.from_user.id)

        if user_channel_status["status"] != "left":
            await bot.send_message(call.from_user.id, "–º–æ–ª–æ–¥–µ—Ü")
        else:
            await bot.send_message(call.from_user.id, "–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å :(")


if __name__ == '__main__':
    executor.start_polling(dispatcher)
    
    
    
    
    
    
    
    global punkts
    try:
        punkts = message.text
    except (ValueError,UnboundLocalError):
        await state.set_state(ZADANIA.punkts)
        await message.reply("–≠—Ç–æ –Ω–µ —Ü–∏—Ñ—Ä–∞!")
        await message.answer("–£–∫–∞–∂–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—É–Ω—Ç–æ–≤(–æ—Ç 1 –¥–æ 25),–∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å,—á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
    if punkts > 25 and punkts < 1:
        await message.reply("–û—Ç 1 –¥–æ 25!–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ –ø—É–Ω–∫—Ç–æ–≤!")
        await state.set_state(ZADANIA.punkts)
    else:
        i = 0
        message = "–í–≤–µ–¥–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è,–∫–æ—Ç–æ—Ä—ã–π –æ–Ω –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞ "
        for i in range(1,punkts):
            m1 = "\n".join(
                [f"{message}{index + 1}!"for index, in punkts]
            )
            
            
button = types.InlineKeyboardMarkup(row_width=1)
            m1 = types.InlineKeyboardButton(
                text="–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/Arves_Job"
            )
            m2 = types.InlineKeyboardButton(text="–ì–æ—Ç–æ–≤–æ‚úÖ", callback_data="–≥–æ—Ç–æ–≤–æ")
            button.add(m1, m2)
            await bot.send_message(
                message.from_user.id,
                "<i><b>–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª!</b></i>",
                reply_markup=button,
                parse_mode="HTML",
            )


if not db.user_exists(message.from_user.id):
                start_command = message.text
                referrer_id = str(start_command[7:])
                if str(referrer_id) != "":
                    if str(referrer_id) != str(message.from_user.id):
                        db.add_user(
                            message.from_user.id,
                            message.from_user.full_name,
                            message.from_user.username,
                            referrer_id,
                        )
                        try:
                            await bot.send_message(
                                referrer_id,
                                "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
                            )
                        except:
                            pass
                    else:
                        db.add_user(
                            message.from_user.id,
                            message.from_user.full_name,
                            message.from_user.username,
                        )
                        await bot.send_message(
                            message.from_user.id,
                            "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!",
                        )
                else:
                    db.add_user(
                        message.from_user.id,
                        message.from_user.full_name,
                        message.from_user.username,
                    )

            time = datetime.now().strftime("%H:%M:%S %d-%m-2023")
            await bot.send_message(
                message.from_user.id,
                f"<i><b>MAIN MENU {time}</b></i>\n\n<i><b>{message.from_user.full_name}</b></i>\n<i>/start - <b>–æ–±–Ω–æ–≤–∏—Ç—å</b></i>\n<i><b>–í–∞—à id:</b></i><code>{message.from_user.id}</code>\n\n\n<b>üí≥–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π:</b> 0\n\n\n<b>üë•–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</b> {db.count_reeferals(message.from_user.id)}\n\n\nüí∑–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö: 0‚ÇΩ\nüíµ–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–∞ –∑–∞–¥–∞–Ω–∏—è—Ö: 0‚ÇΩ\nüßæ–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: 0‚ÇΩ\n\n<b>üí∞–ë–∞–ª–∞–Ω—Å:</b> {get_user_balance(message.from_user.id)}\n\n\n<a href ='https://t.me/Arves_Money'><i><b>üó£[–ü–ï–†–ï–ô–¢–ò –í –ö–ê–ù–ê–õ]</b></i></a>\n<a href = 'https://t.me/Arves_Chat'><i><b>üó£[–ü–ï–†–ï–ô–¢–ò –í –ß–ê–¢]</b></i></a>",
                reply_markup=nav.mainMenu,
                parse_mode="HTML",
                disable_web_page_preview=True,
            )

            user_id = message.from_user.id
            conn = sqlite3.connect("database")
            cursor = conn.cursor()
            cursor.execute("SELECT admin FROM users WHERE user_id = ?", (user_id,))
            result = cursor.fetchone()

            if result is not None and result[0] == 1:
                await bot.send_message(
                    message.from_user.id,
                    "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                    reply_markup=nav.Admin_Panele,
                )

            else:
                pass
            if message.from_user.id == int(cfg.ADMIN_ID):
                await bot.send_message(
                    message.from_user.id,
                    "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!",
                    reply_markup=nav.Admin_Panele,
                )