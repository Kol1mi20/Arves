import logging
import sqlite3 
from aiogram import Bot, Dispatcher, executor, types 
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton,InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup,KeyboardButton
import asyncio
import re
import random
from html import escape as html_escape
import markdown
import html
from onewindb import DataBase
import knopki as knpk





 
logging.basicConfig(level=logging.INFO) 

storage = MemoryStorage()
bot = Bot(token= "6546815065:AAEeLqcqtqagLnKGdb8gsaVd5QQWnHczEPU") 
dp = Dispatcher(bot,storage=storage) 
db = DataBase('database') 





class OneState(StatesGroup):
  wait_for_galochka = State()
  wait_for_stiker = State()
  wait_for_galoc = State()
  wait_for_rabota = State()
  wait_for_nazad = State()
  wait_for_nazad1 = State()
  wait_for_nazad2 = State()
  wait_for_kol_vo = State()
  wait_for_ghhg = State()
  wait_for_osenka = State()
  wait_for_gafwdss = State()
  wait_for_osenka1 = State()















@dp.message_handler(commands=["start"]) 
async def start(message: types.Message,state: FSMContext):
  if message.chat.type =="private":
      if not db.user_exists(message.from_user.id): 
        start_command = message.text 
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
          if str(referrer_id) != str(message.from_user.id):
            db.add_user(message.from_user.id, message.from_user.full_name,message.from_user.username,referrer_id)
            try:
              await bot.send_message(referrer_id, "–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!")
            except:
              pass
          else:
            db.add_user(message.from_user.id,message.from_user.full_name,message.from_user.username)
            await bot.send_message(message.from_user.id, "–ù–µ–ª—å–∑—è —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!")
        else:
          db.add_user(message.from_user.id,message.from_user.full_name,message.from_user.username)
    
     
        

        user_id = message.from_user.id
        conn = sqlite3.connect('database')
        cursor = conn.cursor()
        cursor.execute("SELECT new FROM users WHERE user_id = ?",(user_id,))
        result = cursor.fetchone()
     
        if result[0] == 0:
          await bot.send_message(message.from_user.id,f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é,<b>{message.from_user.full_name}</b>\n<i>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ <b>SurfPay!</b></i>\n\n–ú—ã —Ç–µ,–∫—Ç–æ <code>–ø–ª–∞—Ç–∏—Ç –≤–∞–º –∑–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!</code>\n\n–í—Å–µ –ø—Ä–æ—â–µ –ø—Ä–æ—Å—Ç–æ–≥–æ:\n1.–í—ã–±–µ—Ä–∞–µ—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É\n2.–ü—Ä–æ—Ö–æ–¥–∏—Ç–µ –≥–∞–π–¥ –≤ –±–æ—Ç–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π\n3.–ù–∞—á–∏–Ω–∞–µ—Ç–µ –ø–∏—Å–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏\n4.–ü–æ–ª—É—á–∞–µ—Ç–µ —Å–≤–æ—é –æ–ø–ª–∞—Ç—É –≤ –ø—è—Ç–Ω–∏—Ü—É –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏\n\n\n–ü—Ä–µ–∂–¥–µ,—á–µ–º –Ω–∞—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ,–æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≥–∞–π–¥–æ–º/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∏–∂–µüëáüëáüëá\n\n<a href ='https://telegra.ph/Oznakomitelnyj-gajd-dlya-polzovatelej-telegramm-bota-SurfPay-09-08'><i><b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º</b></i></a>\n\n<b>–£–¥–∞—á–∏!</b>",reply_markup=knpk.rep,parse_mode="HTML",disable_web_page_preview=True)
          cursor.execute("UPDATE users SET new = 1 WHERE user_id = ?",(user_id,))
          await state.set_state(OneState.wait_for_galochka)
        if result[0] == 1:
          await bot.send_message(message.from_user.id, f"      <i><b>üìù–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æüìù     </b></i>\n\n<b>FullName:</b> <code><i>{message.from_user.full_name}</i></code>\n<i><b>ID:</b></i><code>{message.from_user.id}</code>\n\n<i><b>üí≤C—Ç–∞–≤–∫–∞ –∑–∞ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ - </b></i> <code>35‚ÇΩ</code>\n     <i><b>üí∑–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b></i> <code>0</code>\n\n<b><i>üë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</i></b> <code>{db.count_reeferals(message.from_user.id)}</code>\n\n<i><b>üí∞–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:</b></i> <code>{get_user_balance(message.from_user.id)}‚ÇΩ</code>\n\n<b>–ù–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!</b>\n\n<a href ='https://t.me/Surf_Pay'><i><b>üó£[–ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ]</b></i></a>\n<a href = 'https://t.me/SurfPay_Viplat'><i><b>üó£[–ö–ê–ù–ê–õ –° –í–´–ü–õ–ê–¢–ê–ú–ò]</b></i></a>",reply_markup=knpk.menu, parse_mode="HTML",disable_web_page_preview=True)
        conn.commit()
        conn.close()

@dp.callback_query_handler(text="gotovo", state=OneState.wait_for_galochka)
async def tex765(callback:types.callback_query,  state: FSMContext) -> None: 
  await bot.send_message(callback.from_user.id, f"      <i><b>üìù–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æüìù     </b></i>\n\n<b>FullName:</b> <code><i>{callback.from_user.full_name}</i></code>\n<i><b>ID:</b></i><code>{callback.from_user.id}</code>\n\n<i><b>üí≤C—Ç–∞–≤–∫–∞ –∑–∞ 1 –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ - </b></i> <code>35‚ÇΩ</code>\n     <i><b>üí∑–í—ã –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏:</b></i> <code>0</code>\n\n<b><i>üë•–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</i></b> <code>{db.count_reeferals(callback.from_user.id)}</code>\n\n<i><b>üí∞–î–æ—Å—Ç—É–ø–Ω–æ –∫ –≤—ã–≤–æ–¥—É:</b></i> <code>{get_user_balance(callback.from_user.id)}‚ÇΩ</code>\n\n<b>–ù–µ –∑–∞–±—ã–≤–∞–π –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Å–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤!</b>\n\n<a href ='https://t.me/Surf_Pay'><i><b>üó£[–ù–û–í–û–°–¢–ù–û–ô –ö–ê–ù–ê–õ]</b></i></a>\n<a href = 'https://t.me/SurfPay_Viplat'><i><b>üó£[–ö–ê–ù–ê–õ –° –í–´–ü–õ–ê–¢–ê–ú–ò]</b></i></a>",reply_markup=knpk.menu, parse_mode="HTML",disable_web_page_preview=True)
  await state.set_state(None)
  
  
@dp.message_handler(Text(equals="–†–∞–±–æ—Ç–∞üí∞",ignore_case=True),state=None)
async def rabota(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–ºüëá</i>",parse_mode="HTML",reply_markup=knpk.rabota)
  await state.set_state(OneState.wait_for_rabota)
  #await message.answer("<b>–¢–≤–æ–π —Ç–µ–∫—Å—Ç,–∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å,–∞ –∑–∞—Ç–µ–º –∏–º–ø–æ–ª—å–∑–æ–≤–∞—Ç—å,–∫–∞–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n\n<code>–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ —Ç–≥ - @qwehar –¢–∞–º –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –≤–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω—é –ø—Ä–æ –ê–±—É–∑ 1WIN</code>\n\n<b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å,–∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏–∑—É—á–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏!\n\n–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é >–ì–∞–π–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã‚úÖ",parse_mode="HTML")

@dp.message_handler(Text(equals="–ì–∞–π–¥—ã/–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏‚úÖ",ignore_case=True),state=OneState.wait_for_rabota)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"<b>–í—Å–µ –≥–∞–π–¥—ã —Ç–∞–∫ –∏–ª–∏ –∏–Ω–∞—á–µ –≤–∑–∞–∏–º–æ—Å–≤—è–∑–∞–Ω—ã –º–µ–∂–¥—É —Å–æ–±–æ–π,–ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ –∏–∑—É—á–∏—Ç—å –í—Å–µ,—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã!</b>\n\n1.<a href = 'https://telegra.ph/Oznakomitelnyj-gajd-dlya-polzovatelej-telegramm-bota-SurfPay-09-08'><i><b>–û–∑–Ω–∞–∫–æ–º–∏—Ç–µ–ª—å–Ω—ã–π –≥–∞–π–¥!</b></i></a>\n\n2.<a href = 'https://telegra.ph/Gajd-na-TikTok-09-10'><i><b>–ì–∞–π–¥ –Ω–∞ TikTok!</b></i></a>\n\n3.<a href = 'https://telegra.ph/Gajd-na-YouTube-Shorts-09-10'><i><b>–ì–∞–π–¥ –Ω–∞ YouTube Shorts!</b></i></a>",parse_mode="HTML",disable_web_page_preview=True,reply_markup=knpk.dfg)
  await state.set_state(OneState.wait_for_nazad)
  
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_nazad)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await rabota(message,state) 


@dp.message_handler(Text(equals="–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—èüìù",ignore_case=True),state=OneState.wait_for_rabota)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await message.answer("<i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π,–∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥ –≤–∏–¥–µ–æ!</i>\n\n<code>–ù–∞–ø–∏—à–∏ –º–Ω–µ –≤ —Ç–≥ - @qwehar–¢–∞–º –≤—Å–µ –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –≤–Ω—è—Ç–Ω–æ –æ–±—ä—è—Å–Ω—é –ø—Ä–æ –ê–±—É–∑ 1WIN</code>",parse_mode="HTML",reply_markup=knpk.dfg)
  await state.set_state(OneState.wait_for_nazad1)
  
  
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_nazad1)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await rabota(message,state) 
  
  




@dp.message_handler(Text(equals="–ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏ü§î",ignore_case=True),state=OneState.wait_for_rabota)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await message.answer("–ö–∞–Ω–∞–ª—ã,–∫–æ—Ç–æ—Ä—ã–µ –ø—É–±–ª–∏–∫—É—é—Ç –Ω—É–∂–Ω—ã–µ –Ω–∞–º –≤–∏–¥–µ–æ:",parse_mode="HTML",reply_markup=knpk.dfg)
  await state.set_state(OneState.wait_for_nazad2)
  

@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_nazad2)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await rabota(message,state) 





@dp.message_handler(Text(equals="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—Éüí∞",ignore_case=True),state=OneState.wait_for_rabota)
async def proverka_raboti(message: types.Message, state: FSMContext) -> None:
  await message.answer("<i>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤—Å–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–≤–æ–∏—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –æ–¥–Ω–∏–º —Ñ–∞–π–ª–æ–º!</i>",parse_mode="HTML",reply_markup=knpk.dfg)
  await state.set_state(OneState.wait_for_kol_vo)
  


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_rabota)
async def proverka_raboti(message: types.Message, state: FSMContext) -> None:
    await state.reset_state()
    return await rabota(message,state) 
  
  
@dp.message_handler(lambda message:  message.photo, content_types=["photo"],state = OneState.wait_for_kol_vo)
async def load_photo(message: types.Message, state: FSMContext):
   await message.answer("<i>–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤,–∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª!</i>",parse_mode="HTML")
   await state.set_state(OneState.wait_for_ghhg)

@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_ghhg)
async def proverka_raboti(message: types.Message, state: FSMContext) -> None:
    await state.reset_state()
    return await rabota(message,state) 

@dp.message_handler(lambda message: not message.photo, state = OneState.wait_for_kol_vo)
async def check_photo(message: types.Message,state: FSMContext):
  await state.reset_state()
  return await proverka_raboti(message,state) 


  
@dp.message_handler(content_types=["any"],state=OneState.wait_for_ghhg)
async def sendall4(message: types.Message,state: FSMContext):
  global chislo
  try:
     chislo = int(message.text)
  except (ValueError,UnboundLocalError,TypeError):
    await state.reset_state()
    await load_photo(message,state)
    return
   

 
    
  
  
  await message.answer("<i>–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–∞–±–æ—Ç—É!–í–∞—à–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.</i>",parse_mode="HTML")
  await bot.send_message( -1001900257574,f"ID –ú–∞—Å—Ç–µ—Ä–∞:{message.from_user.id}\nUsername –ú–∞—Å—Ç–µ—Ä–∞:{message.from_user.username}\n\n–ö–æ–ª-–≤–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤:{chislo}")
  await state.reset_state()
  return await start(message,state)



@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_kol_vo)
async def proverka_raboti(message: types.Message, state: FSMContext) -> None:
    await state.reset_state()
    return await rabota(message,state) 





@dp.message_handler(Text(equals="–ñ–∞–ª–æ–±—ã/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—èüîä",ignore_case=True),state=OneState.wait_for_rabota)
async def geref43(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"<b>–ö–∞–∫ –æ—Ü–µ–Ω–∏—à—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –æ—Ç 1/5?</b>",parse_mode="HTML",reply_markup=knpk.dfg)
  await state.set_state(OneState.wait_for_osenka)
  
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥‚¨ÖÔ∏è",ignore_case=True),state=OneState.wait_for_osenka)
async def geref43(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await rabota(message,state) 


@dp.message_handler(content_types=["text"],state=OneState.wait_for_osenka)
async def tex765(message: types.Message, state: FSMContext) -> None:
  global ocenka
  ocenka = int(message.text)
  if ocenka < 1:
    await state.reset_state()
    return await geref43(message,state) 
  if ocenka > 5:
    await state.reset_state()
    return await geref43(message,state) 
  if ocenka == 1 or 2 or 3 or 4 or 5:
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!–ß—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å?",parse_mode="HTML",reply_markup=knpk.hrf)
    await state.set_state(OneState.wait_for_gafwdss)


@dp.message_handler(Text(equals="–ñ–∞–ª–æ–±—Éüìù",ignore_case=True),state=OneState.wait_for_gafwdss)
async def geref667(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –∂–∞–ª–æ–±—É.–ß—Ç–æ —Ç–µ–±–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å?")
  await state.set_state(OneState.wait_for_osenka1)
  
@dp.message_handler(lambda message:  message.text, content_types=["text"],state = OneState.wait_for_osenka1)
async def geref(message: types.Message, state: FSMContext) -> None: 
  try:
         jaloba = message.text
         await message.answer("–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–ø–∞–≤–ª–µ–Ω–∞!") 
         
  except (ValueError,TypeError,UnboundLocalError,UnicodeDecodeError):
    pass
        
  await state.reset_state()
  return await rabota(message,state)

@dp.message_handler(Text(equals="–ñ–∞–ª–æ–±—Éüìù",ignore_case=True),state=OneState.wait_for_osenka1)
async def geref6err(message: types.Message, state: FSMContext) -> None:
            await state.reset_state()
            return await geref667(message,state)  

@dp.message_handler(Text(equals="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µüìù",ignore_case=True),state=OneState.wait_for_osenka1)
async def geref6err(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await geref667(message,state)  



@dp.message_handler(Text(equals="–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µüìù",ignore_case=True),state=OneState.wait_for_gafwdss)
async def geref(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"–ù–∞–ø–∏—à–∏ –∏–¥–µ—é/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –±–æ—Ç–∞.–ß—Ç–æ —Ö–æ—á–µ—à—å —É–ª—É—á—à–∏—Ç—å/–∏–∑–º–µ–Ω–∏—Ç—å?")
  await state.set_state(OneState.wait_for_osenka1)
  
@dp.message_handler(lambda message:  message.text, content_types=["text"],state = OneState.wait_for_osenka1)
async def geref(message: types.Message, state: FSMContext) -> None:
  try:
      predlojenie = message.text
      await message.answer("–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ!")
  except (ValueError,TypeError,UnboundLocalError,UnicodeDecodeError):
    pass
  await state.reset_state()
  return await rabota(message,state)
  
  























@dp.message_handler(Text(equals="–Ø —É–∂–µ –æ–∑–Ω–∞–∫–æ–º–ª–µ–Ωüòä",ignore_case=True),state=None)
async def tex765(message: types.Message, state: FSMContext) -> None:
  pass
  
 
 
 
 
@dp.message_handler(Text(equals="–û–∑–Ω–∞–∫–æ–º–ª—é—Å—å –∏ –≤–µ—Ä–Ω—É—Å—åüëå",ignore_case=True),state=None)
async def tex765(message: types.Message, state: FSMContext) -> None: 
  await state.reset_state()
  return await start(message,state)  
  
  
  
  
  
  
  
@dp.message_handler(Text(equals="üëå",ignore_case=True),state=OneState.wait_for_galoc)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await start(message,state)  
  
  
  
  
  
  
@dp.message_handler(Text(equals="–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞üë•",ignore_case=True),state=None)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await message.answer(f"ü§ù<i><b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b></i>\n\n<i>üë•–í –Ω–∞—à–µ–º –±–æ—Ç–µ –∏–º–µ–µ—Ç—Å—è –æ–¥–Ω–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:\n\n 1 —É—Ä–æ–≤–µ–Ω—å - 15 % –æ—Ç –∑–∞—Ä–∞–±–æ—Ç–∫–∞\n\n‚úîÔ∏è–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç–µ —Å –∏—Ö –∑–∞—Ä–∞–±–æ—Ç–∫–∞!\n\nüëÅ‚Äçüó®–°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:</i>\n<code>https://t.me/SurfPay_bot?start={message.from_user.id}</code>",parse_mode="HTML",reply_markup=knpk.kbkb)
  await state.set_state(OneState.wait_for_stiker)
  
@dp.message_handler(Text(equals="üëå",ignore_case=True),state=OneState.wait_for_stiker)
async def tex765(message: types.Message, state: FSMContext) -> None:
  await state.reset_state()
  return await start(message,state) 































def get_user_balance(user_id):
    conn = sqlite3.connect('database')
    c = conn.cursor()
    c.execute("SELECT BALANCE FROM users WHERE user_id=?", (user_id,))
    user_balance = c.fetchone()
    conn.close()
    return user_balance[0] if user_balance else 0.0


def update_user_balance(user_id, new_balance):
    conn = sqlite3.connect('database')
    c = conn.cursor()
    c.execute("UPDATE users SET BALANCE=? WHERE user_id=?", (new_balance, user_id))
    conn.commit()
    conn.close()






















































if __name__ == "__main__":
  executor.start_polling(dp, skip_updates=True)